<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:component="component.*"
         implements="worker.util.IDownloadFileWorkerUIBinder"
         enabled="false">

    <fx:Script>
		<![CDATA[
        import mx.controls.Alert;

        import worker.util.IDownloadFileWorker;
        import worker.util.IDownloadFileWorkerTelemetry;

        private var _downloader:IDownloadFileWorker;

        [Bindable]
        private var _telemetry:IDownloadFileWorkerTelemetry;

        [Bindable]
        public function get downloader():IDownloadFileWorker {
            return _downloader;
        }

        public function set downloader(v:IDownloadFileWorker):void {
            _downloader = v;
            if (_downloader is IDownloadFileWorkerTelemetry)
                _telemetry = _downloader as IDownloadFileWorkerTelemetry;

            this.enabled = true;
        }

        [Bindable]
        private var _progressLabel:String = "CurrentProgress 0%";

        public function onProgress(event:ProgressEvent):void {
            doPercentCompleted(event.bytesLoaded, event.bytesTotal);
        }

        public function onError(event:ErrorEvent):void {
            unloadWorker();
            doPercentCompleted(_downloader.fileDescriptor.bytesLoaded, _downloader.fileDescriptor.bytesTotal);
            Alert.show(event.text, "Error: " + (event.errorID == 0) ? "" : event.errorID.toString());
        }

        public function onCompleted(event:Event):void {
            unloadWorker();
            doPercentCompleted(_downloader.fileDescriptor.bytesLoaded, _downloader.fileDescriptor.bytesTotal);
        }

        public function unloadWorker():void {
            this.enabled = false;
            downloader.terminate();
        }

        private function doPercentCompleted(bytesLoaded:Number, bytesTotal:Number):void {
            var percentComplete:Number = bytesLoaded * 100 / bytesTotal;

            progressBarFormat.fractionalDigits = downloader.fileDescriptor.progressPrecision;
            progressBar.setProgress(percentComplete, 100);

            _progressLabel = progressBarFormat.format(percentComplete) + "% complete";
            _progressLabel += _telemetry ? " (" + speedFormat.format(_telemetry.numberOfBytesPerSecondAverage / 1000) + " Kb/s)" : "";
        }
        ]]>
	</fx:Script>

    <fx:Declarations>
        <s:NumberFormatter id="progressBarFormat"
                           fractionalDigits="0"/>
        <s:NumberFormatter id="speedFormat"
                           fractionalDigits="2"/>
    </fx:Declarations>

    <s:layout>
        <s:VerticalLayout horizontalAlign="center"/>
    </s:layout>

    <s:Label text="{downloader.fileDescriptor.fileUrl}"/>

    <s:HGroup>
        <s:VGroup horizontalAlign="center">
            <mx:ProgressBar id="progressBar" labelPlacement="center"
                            color="0x000000"
                            chromeColor="red"
                            minimum="0" visible="true" maximum="100"
                            label="{_progressLabel}"
                            direction="right" mode="manual" width="300"/>

            <s:CheckBox id="useCacheCB" label="useCache"
                        selected="{downloader.useCache}"
                        change="downloader.useCache = useCacheCB.selected"
                        enabled="{!downloader.isRunning}"/>

            <s:HGroup verticalAlign="middle" id="controlGroup"
                      color="0x000000">
                <s:Button id="startBtn" label="Start" click="downloader.start()" enabled="{!downloader.isRunning}"/>
                <s:Button id="pauseBtn" label="Pause" click="downloader.pause()"
                          enabled="{!startBtn.enabled &amp;&amp; downloader.isResumable &amp;&amp; !downloader.isPaused}"/>
                <s:Button id="resumeBtn" label="Resume" click="downloader.resume()" enabled="{downloader.isPaused}"/>
                <s:Button id="terminateBtn" label="Terminate" click="unloadWorker()" enabled="{downloader.isRunning}"/>
            </s:HGroup>
        </s:VGroup>

        <component:DownloadFileWorkerTelemetryUI telemetry="{_telemetry}"
                                                 visible="{_telemetry != null}" includeInLayout="{_telemetry != null}" width="200"/>
    </s:HGroup>

</s:Group>
